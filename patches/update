#!/usr/bin/perl -w
#
# Scans the local patches and their result files to rebuild the index file and
# update the patches website.
#
# Copyright 2009 Alexandre Julliard
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use CGI qw(:standard);

my %status_descr =
(
 "nil"        => "New",
 "assigned"   => "Assigned",
 "applied"    => "Applied",
 "committed"  => "Committed",
 "applyfail"  => "Apply failure",
 "buildfail"  => "Build failure",
 "deferred"   => "Deferred",
 "authorship" => "Authorship",
 "formatting" => "Formatting",
 "other"      => "Other project",
 "nopatch"    => "No patch",
 "rejected"   => "Rejected",
 "split"      => "Needs splitting",
 "depend"     => "Dependency",
 "superseded" => "Superseded",
 "sequence"   => "Bad sequence",
 "testcase"   => "Needs tests",
 "testfail"   => "Test failure",
 "reply"      => "Reply",
);

my @legend =
(
 [ "nil",        "<ul><li>Patch not even looked at yet, there's still hope...</li></ul>" ],
 [ "assigned",   "<ul><li>Waiting for sign-off or feedback from the assigned reviewer. If you don't hear anything after a couple of weeks, please resend the patch.</li></ul>" ],
 [ "committed",  "<ul><li>You have done everything right; congratulations!</li>" .
                 "<li>You screwed up but AJ missed it, send a fix before someone notices ;-)</li></ul>" ],
 [ "depend",     "<ul><li>The patch is part of a series in which a previous patch hasn't been applied. Resend when the dependent patch is fixed.</li></ul>" ],
 [ "sequence",   "<ul><li>The patch is part of a series but it's not correctly numbered. Resend the series with correct sequence numbers to enable the <a href=\"//testbot.winehq.org/\">testbot</a> to figure it out.</li></ul>" ],
 [ "superseded", "<ul><li>An updated version of the patch has been submitted.</li>" .
                 "<li>Someone else fixed the problem already.</li></ul>" ],
 [ "testcase",   "<ul><li>You need to write some test cases demonstrating that the patch is correct.</li></ul>" ],
 [ "deferred",   "<ul><li>The patch is deferred because of code freeze for an upcoming release. Either resend after the release, make the patch less intrusive, or make a convincing argument that it needs to be included in the release.</li></ul>" ],
 [ "other",      "<ul><li>The patch belongs to another WineHQ project (website, appdb, etc.) and will be applied by the respective maintainer.</li></ul>" ],
 [ "applyfail",  "<ul><li>The patch got mangled in transit.</li>" .
                 "<li>It's not relative to the latest git.</li>" .
                 "<li>Someone else sent a patch that changes the same area and causes conflicts.</li>" .
                 "<li>The patch is relative to a subdirectory (using 'git format-patch' is strongly recommended).</li></ul>" ],
 [ "buildfail",  "<ul><li>Syntax error or other compile problem.</li>" .
                 "<li>You forgot to include some changes or new files required for compilation.</li>" .
                 "<li>The patch causes compiler warnings (maintainer mode implies -Werror).</li></ul>" ],
 [ "authorship", "<ul><li>The patch author's full name, email address, or Signed-off-by headers are incorrect or missing.</li></ul>" ],
 [ "formatting", "<ul><li>Whitespace got mangled in transit.</li>" .
                 "<li>Indentation is messed up (usually from editing with a non-standard tab size).</li>" .
                 "<li>8-bit chars got mangled in transit (usually when sending patches to translation files).</li>" .
                 "<li>You are making gratuitous formatting changes to the code.</li>" .
                 "<li>You are using C++ comments.</li></ul>" ],
 [ "nopatch",    "<ul><li>You hit 'send' before attaching the patch.</li></ul>" ],
 [ "rejected",   "<ul><li>The patch has been rejected with a comment on wine-devel or #winehackers.</li>" .
                 "<li>The patch contains an obvious error that you are expected to figure out yourself.</li></ul>" ],
 [ "split",      "<ul><li>A single mail contained multiple patch files.</li>" .
                 "<li>The patch contains unrelated changes that should be sent as separate patches.</li>" .
                 "<li>The patch is simply too large for review, you need to find a way to split it.</li></ul>" ],
 [ "testfail",   "<ul><li>You didn't run 'make test' before submitting.</li>" .
                 "<li>The patch requires a Wine fix but doesn't use todo_wine.</li>" .
                 "<li>The patch fixes a failure but doesn't remove the corresponding todo_wine.</li>" .
                 "<li>The <a href=\"//testbot.winehq.org/\">testbot</a> detected new failures on Windows.</li></ul>" ],
);

my $dir = $ARGV[0] || "$ENV{HOME}/patches";
my $dest = "/home/winehq/opt/source/patches";
my %patches;
my %messages;
my %subdirs;

sub format_author($)
{
    my $str = shift;
    if ($str =~ /\s*((\"(.*)\")|(.*?))\s*<(\S+\@\S+)>/) { return $3 || $4 || $5; }
    return $str;
}

sub uniq
{
    my %seen;
    return grep { !$seen{$_}++ } @_;
}

sub read_file($)
{
    my $file = shift;
    if (open FILE, "<$file")
    {
        chomp( my $ret = <FILE> );
        close FILE;
        return $ret;
    }
    return undef;
}

my $js = <<END;
function toggle_display(id)
{
    var elems = document.getElementById('main_table').getElementsByClassName(id);
    for (i = 0; i < elems.length; i++)
    {
        var display = elems[i].style.display;
        elems[i].style.display = display == "none" ? "" : "none";
    }
}
END

open INDEX, ">:utf8", "$dest/index.html.new" or die "cannot create $dest/index.html.new";

print INDEX start_html(-title=>"Patches list",
                       -encoding=>"utf-8",
                       -script=>$js,
                       -style=>{src=>"patches.css"});

print INDEX "<div id=\"logo_glass\"><a href=\"/patches/\"><img src=\"//winehq.org/images/winehq_logo_glass_sm.png\"></a></div>\n";
print INDEX "<div id=\"logo_text\"><a href=\"/patches/\"><img src=\"//winehq.org/images/winehq_logo_text.png\" alt=\"WineHQ\" title=\"WineHQ\"></a></div>\n";
print INDEX "<div id=\"tabs\"><ul>",
    "<li><a href=\"//www.winehq.org/\">WineHQ</a></li>",
    "<li><a href=\"//wiki.winehq.org/\">Wiki</a></li>",
    "<li><a href=\"//appdb.winehq.org/\">AppDB</a></li>",
    "<li><a href=\"//bugs.winehq.org/\">Bugzilla</a></li>",
    "<li><a href=\"//forum.winehq.org/\">Forums</a></li></ul></div>\n";
print INDEX "<div id=\"logo_blurb\">Wine source repository &ndash; Patch status</div>\n";
print INDEX "<div id=\"main_content\"><div id=\"content\"><div class=\"main\">\n";
print INDEX "<table id=\"main_table\" class=\"main\"><thead><tr><th class=\"id\">ID</th>",
    "<th class=\"status\">Status</th>",
    "<th colspan=\"2\" class=\"author\">Author</th>",
    "<th class=\"subject\">Subject</th>",
    "<th class=\"author\">Reviewer</th>",
    "<th class=\"status\">Sign</th>",
    "<th class=\"status\">Testbot</th>",
    "<th class=\"status\">Job ID</th></tr></thead><tbody>\n";

opendir DIR, $dir;
foreach my $file (readdir DIR)
{
    next unless $file =~ /^[0-9]+$/;
    my %patch;
    next unless open PATCH, "<:raw", "$dir/$file";
    while (<PATCH>)
    {
        utf8::decode($_);
        if (/^Subject: (.*)$/) { $patch{"subject"} = $1; }
        elsif (/^From: Marvin <testbot\@winehq.org>$/) { $patch{"from_marvin"} = 1; }
        elsif (/^From: (.*)$/) { $patch{"author"} = format_author($1); }
        elsif (/^Message-Id: (.*)$/) { $patch{"msgid"} = $1; }
        elsif (/^In-Reply-To: (.*)$/) { $patch{"reply"} = $1; }
        elsif (/^References: (.*)$/) { @{$patch{"refs"}} = split /\s+/, $1; }
        last if (/^$/);
    }
    while (<PATCH>)
    {
        utf8::decode($_);
        if (/^\s*Signed-off-by: (.*)$/) { push @{$patch{"signoff"}}, format_author($1); }
        last if (/^---$/);
    }
    while (<PATCH>)
    {
        utf8::decode($_);
        if (/^diff --git a\//) { $patch{"has_patch"} = 1; last; }
    }
    close PATCH;

    $patch{"id"} = $file;
    $patch{"author"} = "Marvin (Testbot)" if $patch{"from_marvin"};
    $patch{"status"} = read_file( "$dir/$file.status" ) || "nil";
    $patch{"order"}  = read_file( "$dir/$file.order" ) || $file;
    $patch{"commit"} = read_file( "$dir/$file.commit" ) if $patch{status} eq "committed";
    if (open REVIEW, "<:raw", "$dir/$file.review")
    {
        $_ = <REVIEW>;
        chomp;
        utf8::decode($_);
        $patch{"review"} = format_author($_);
        close REVIEW;
    }
    $patch{"testbot"} = "";
    $patch{"testclass"} = "testbot";
    $patch{"testjob"} = "";
    $patch{"testurl"} = "";
    if (-f "$dir/$file.testbot")
    {
        $patch{"testbot"} = "OK";
        if (open LOG, "<:raw", "$dir/$file.testbot")
        {
            while (<LOG>)
            {
                utf8::decode($_);
                last if /^$/;
                if (/^Job-ID: (.*)$/) { $patch{"testjob"} = $1; }
                elsif (/^URL: (.*)$/) { $patch{"testurl"} = $1; }
            }
            close LOG;
        }
    }
    if (defined $patch{"msgid"})
    {
        $messages{$patch{"msgid"}} = \%patch;
    }
    $patches{$file} = \%patch;
    if ($file =~ /^([0-9]+)[0-9]{4}$/) { $subdirs{$1} = 1; }
}
closedir DIR;

# build mail threads

sub assign_parent($);
sub assign_parent($)
{
    my $patch = shift;

    if (defined($patch->{"parent"})) { return $patch->{"parent"}; }

    return $patch if defined $patch->{"has_patch"};
    return $patch unless defined $patch->{"reply"};

    foreach ($patch->{"reply"}, @{$patch->{"refs"}})
    {
        next unless defined $messages{$_};
        my $parent = assign_parent( $messages{$_} );
        next unless $parent;
        # add it to the parent's children
        $patch->{"parent"} = $parent;
        push @{$parent->{"children"}}, $patch;
        push @{$parent->{"signoff"}}, @{$patch->{"signoff"}} if $patch->{"signoff"};
        if ($patch->{"from_marvin"})
        {
            $parent->{"testbot"} = "<a href=\"data/$patch->{id}\">Failed</a>";
            $parent->{"testclass"} = "testbot botfail";
        }
        return $parent;
    }
    return $patch;
}

foreach my $file (sort keys %patches)
{
    assign_parent( $patches{$file} );
    # remove patches that have a parent
    delete $patches{$file} if $patches{$file}->{"parent"};
}

my $row = 0;
foreach my $file (sort { $patches{$b}->{"order"} <=> $patches{$a}->{"order"} } keys %patches)
{
    my $patch = $patches{$file};

    if (!defined $patch->{"has_patch"}) # skip non-patches
    {
        next if $patch->{"status"} eq "reply";
        next if $patch->{"from_marvin"};
        next unless $patch->{"subject"} =~ /^\[.*PATCH.*\]/;
    }

    printf INDEX "<tr class=\"%s %s\"><td class=\"id\">%s</td>", $row & 1 ? "odd" : "even", $patch->{status}, $file;
    if (defined($patch->{commit}))
    {
        printf INDEX "<td class=\"status\"><a href=\"%s\">%s</a></td>", $patch->{commit}, $status_descr{$patch->{status}};
    }
    else
    {
        printf INDEX "<td class=\"status\"><a href=\"#legend\">%s</a></td>", $status_descr{$patch->{status}} || $patch->{status};
    }
    if (defined $patch->{"children"})
    {
        printf INDEX "<td class=\"author\">%s</td>", escapeHTML($patch->{"author"});
        printf INDEX "<td class=\"arrow\" onclick=\"toggle_display('$file.reply')\">&#9660;</td>";
    }
    else
    {
        printf INDEX "<td colspan=\"2\" class=\"author\">%s</td>", escapeHTML($patch->{"author"});
    }
    printf INDEX "<td class=\"subject\"><a href=\"data/$file\">%s</a></td>", escapeHTML($patch->{"subject"});
    if ($patch->{"review"})
    {
        printf INDEX "<td class=\"author\">%s</td>", escapeHTML($patch->{"review"});
    }
    else
    {
        printf INDEX "<td></td>";
    }
    my @signoff = defined($patch->{"signoff"}) ? uniq( @{$patch->{"signoff"}} ) : ();
    if (@signoff)
    {
        printf INDEX "<td class=\"checkmark\" onclick=\"toggle_display('$file.signoff')\">%s</td>", "&#10003;" x @signoff;
    }
    else
    {
        printf INDEX "<td class=\"failmark\">X</td>";
    }
    printf INDEX "<td class=\"%s\">%s</td>", $patch->{"testclass"}, $patch->{"testbot"};
    if ($patch->{"testjob"} && $patch->{"testurl"})
    {
        printf INDEX "<td class=\"%s\"><a href=\"%s\">%s</a></td>",
                     $patch->{"testclass"}, $patch->{"testurl"}, $patch->{"testjob"};
    }
    else
    {
        print INDEX "<td></td>";
    }
    print INDEX "</tr>\n";
    if (@signoff)
    {
        printf INDEX "<tr class=\"%s $file.signoff\" id=\"$file.signoff\" style=\"display: none;\" onclick=\"toggle_display('$file.signoff')\">" .
                     "<td colspan=\"5\" /><td colspan=\"4\" class=\"signoffextra author\">%s</td></tr>\n",
               $row & 1 ? "odd" : "even", join("", map { "Signed-off-by: " . escapeHTML($_) . "<br/>"; } @signoff );
    }
    foreach my $child (@{$patch->{"children"}})
    {
        printf INDEX "<tr class=\"%s\ $file.reply\" id=\"%s\" style=\"display: none;\" onclick=\"toggle_display('$file.reply')\">" .
                     "<td colspan=\"2\" /><td colspan=\"2\" class=\"reply author\"><span class=\"indent\" />%s</td> " .
                     "<td class=\"reply author\"><span class=\"indent\" /><a href=\"data/%s\">%s</a></td> " .
                     "<td colspan=\"4\" /></tr>\n",
            $row & 1 ? "odd" : "even", $child->{"id"}, escapeHTML($child->{"author"}), $child->{"id"}, escapeHTML($child->{"subject"});
    }
    $row++;
}
print INDEX "</tbody></table></div>\n";

$row = 0;
print INDEX "<div class=\"legend\"><h2 id=\"legend\">Legend</h2>\n";
print INDEX "<table class=\"legend\"><tr><th class=\"status\">Status</th><th class=\"causes\">Possible causes</th></tr>\n";
foreach my $status (@legend)
{
    printf INDEX "<tr class=\"%s\"><td class=\"status %s\">%s</td><td class=\"causes\">%s</td></tr>\n",
           $row & 1 ? "odd" : "even", $status->[0], $status_descr{$status->[0]}, $status->[1];
    $row++;
}
print INDEX "</table></div></div></div>\n";

my $sorter = <<END;
<script>
  var table = document.getElementById('main_table'),
      thead = table.children[0],
      tbody = table.children[1],
      ths   = thead.getElementsByTagName('th'),
      trs   = tbody.getElementsByTagName('tr'),
      i, j, k, id, do_reverse, th, sort_func;

  for (i = 0; i < ths.length; i++)
    ths[i].onclick = sort_table;

  function sort_table(event)
  {
    th = event.target;
    var sort_type = text_content(th), clone_trs = [], sign_trs = {}, tr, j, k;

    if (sort_type == 'ID' || sort_type == 'Job ID')
      sort_func = int_sort;
    else if(sort_type == 'Sign')
      sort_func = sign_sort;
    else
      sort_func = text_sort;

    if (th.getAttribute('data-order')==1)
      do_reverse = 0;
    else
      do_reverse = 1;
    th.setAttribute('data-order', do_reverse)

    for (j = 0, k = 0, i = trs.length - 1; i != -1; i--)
    {
      tr = tbody.removeChild(trs[0])
      if (!tr.getAttribute('id'))
      {
        clone_trs[j++] = tr;
        id = text_content(tr.children[0]);
        k = 0;
      }
      else if (id) /* based on the patch ID */
      {
        if (!k) sign_trs[id] = [];
        sign_trs[id][k++] = tr;
      }
    }
    clone_trs.sort(sorter);

    for (i = 0; i < clone_trs.length; i++)
    {
      odd_even(clone_trs[i], i & 1);
      tbody.appendChild(clone_trs[i]);
      j = text_content(clone_trs[i].children[0]);
      if (sign_trs[j])
        for (k = 0; k < sign_trs[j].length; k++)
          tbody.appendChild(sign_trs[j][k]);
    }
  }

  function odd_even(tr, i)
  {
    var cl = tr.getAttribute('class').replace(/odd|even/gi,'');
    tr.setAttribute('class', cl + (i & 1 ? ' odd ' : ' even '));
  }

  function sorter(a, b)
  {
    var r = sort_func(a.children[th.cellIndex], b.children[th.cellIndex]);

    if (do_reverse)
    {
      if (r == 1) r = -1;
      else if(r == -1) r = 1;
    }
    return r;
  }

  function text_content(ele)
  {
    if (typeof ele.textContent == 'string')
      return ele.textContent;
    else if (typeof ele.innerText == 'string')
      return ele.innerText;
    return ele.innerHTML;
  }

  function int_sort(a, b, r)
  {
    var ret, t1 = text_content(a), t2 = text_content(b);
    if (!r) r = 1; //when R is set reverse_order is ignored

    if (t1.length == 0 && t2.length == 0) return 0;
    if (t1.length && !t2.length) return -1;
    if (!t1.length && t2.length) return 1;
    return parseInt(t1) - parseInt(t2) < 0 ? -1 * r : 1 * r;
  }

  function text_sort(a, b)
  {
    var t1 = text_content(a), t2 = text_content(b);

    //if equal sort by patch id
    return t1 === t2 ? int_sort(a.parentElement.children[0], b.parentElement.children[0], 2) : t1 > t2 ? -1 : 1;
  }

  function sign_sort(a, b)
  {
    var ret, t1 = text_content(a), t2 = text_content(b);

    if (t1 == 'X') return -1;
    if (t2 == 'X') return 1;
    ret = t1.length - t2.length;

    //if equal sort by patch id
    return ret ? ret : int_sort(a.parentElement.children[0], b.parentElement.children[0], 2);
  }

</script>
END

print INDEX $sorter;

print INDEX end_html;
close INDEX;

foreach (keys %subdirs)
{
    !system "rsync", "-q", "-r", "--chmod=+r", "--include=$_*", "--exclude=*", "$dir/", "$dest/data/$_" or die "rsync failed: $?";
}

rename "$dest/index.html.new", "$dest/index.html" or die "failed to update index.html";
