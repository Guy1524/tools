#!/usr/bin/perl -w
#
# Deletes or archives 'old' patches. Note that the exact definition of 'old'
# depends on the patch's status.
#
# Copyright 2009 Alexandre Julliard
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


# age of last status change before expiry, in days
my %status_expiry =
(
 "nil"        => 30,
 "pending"    => 30,
 "assigned"   => 30,
 "applied"    => 30,
 "committed"  => 1,
 "applyfail"  => 7,
 "buildfail"  => 7,
 "deferred"   => 7,
 "formatting" => 7,
 "other"      => 7,
 "nopatch"    => 3,
 "rejected"   => 7,
 "split"      => 7,
 "depend"     => 7,
 "sequence"   => 7,
 "signoff"    => 1,
 "superseded" => 1,
 "testcase"   => 7,
 "testfail"   => 7,
);

my %status_descr =
(
 "nil"        => "New",
 "pending"    => "Pending",
 "assigned"   => "Assigned",
 "applied"    => "Applied",
 "committed"  => "Committed",
 "applyfail"  => "Apply failure",
 "buildfail"  => "Build failure",
 "deferred"   => "Deferred",
 "formatting" => "Formatting",
 "other"      => "Other project",
 "nopatch"    => "No patch",
 "rejected"   => "Rejected",
 "split"      => "Needs splitting",
 "depend"     => "Dependency",
 "sequence"   => "Bad sequence",
 "signoff"    => "Sign-off",
 "superseded" => "Superseded",
 "testcase"   => "Needs tests",
 "testfail"   => "Test failure",
);

my %status_explanation =
(
 "pending"    =>
"This means that the patch is not necessarily wrong, but its
correctness is not obvious. You should either write a test case
demonstrating that it is correct, try to fix the problem in a more
straightforward way, or better explain why you are doing things this
way.",
 "assigned"    =>
"This means that the patch has been assigned to a reviewer. If the
reviewer signs off on the patch, it will be committed, otherwise
you'll receive advice on how to improve it. If you don't hear anything
after a couple of weeks, please resend the patch.",
 "committed"  =>
"This means that your patch has been approved, and committed to the
main git tree. Congratulations!",
 "applyfail"  =>
"This means that git-apply refused to apply the patch. This could be
either because it got mangled in transit, it's not relative to the
latest git, or it conflicts with someone else's patch in the same
area. You need to resend an updated patch.",
 "buildfail"  =>
"This means that the patched code doesn't compile. It could also be
because you forgot to include some changes or new files required for
compilation, or that the patch causes compiler warnings (maintainer
mode implies -Werror). You need to resend a fixed patch.",
 "deferred"   =>
"This means that the patch is deferred because of code freeze for an
upcoming release. You need to either resend after the release, make
the patch less intrusive, or make a convincing argument that it needs
to be included in the release.",
 "formatting" =>
"This means that there are some formatting issues with your
patch. Either the author's full name, email address, or Signed-off-by
headers are missing, indentation is messed up (usually from editing
with a non-standard tab size), or there are gratuitous formatting
changes to the code. You need to resend a fixed patch.",
 "other"      =>
"This means that the patch belongs to another WineHQ project (website,
appdb, etc.) and will be applied by the respective maintainer.",
 "nopatch"    =>
"This means that no patch was found in your mail.",
 "rejected"   =>
"This means that the patch has been rejected by a reviewer. You should
have received a mail explaining why it was rejected. You need to fix
the issue and resend the patch, or if you are convinced that your
patch is good as is, you should reply to the rejection message with
your counterarguments.",
 "split"      =>
"This means that the patch needs to be split, either because it
contains unrelated changes that should be their own separate patch, or
because it's too large for review. You need to find a way to resend
the changes in smaller chunks.",
 "depend"     =>
"This means that the patch is part of a series in which a previous
patch hasn't been applied. You need to resend when the dependent patch
is fixed.",
 "sequence"   =>
"This means that the patch is part of a series but it's not correctly
numbered. You need to resend the series with correct sequence numbers
to enable the Testbot to figure it out.",
 "testcase"   =>
"This means that you need to write some test cases demonstrating that
the patch is correct.",
# No notifications are sent for the following:
# "nil"
# "signoff"
# "superseded"
# "testfail"
);

sub usage()
{
    print STDERR "Usage: $0 [-n] [-v] [directory]\n";
    exit 1;
}

my $dir = ".";
my $dry_run = 0;
my $quiet = 1;
my $now = time();
my $email_from = "Marvin <testbot\@winehq.org>";
my $base_url = "https://source.winehq.org/patches/data";
my %reviews;

foreach my $arg (@ARGV)
{
    if ($arg eq "-n") { $dry_run = 1; }
    elsif ($arg eq "-v") { $quiet = 0; }
    elsif ($arg =~ /^-/) { usage(); }
    else { $dir = $arg; }
}

sub get_patch_subject($)
{
    my $file = shift;
    my $ret;

    return undef unless open PATCH, "<$dir/$file";
    while (<PATCH>)
    {
        if (/^Subject: (.*)$/)
        {
            $ret = $1;
            last;
        }
    }
    close PATCH;
    return $ret;
}

sub get_patch_state($)
{
    my $file = shift;
    my $status = "nil";
    my $mtime = 0;

    if (open STATUS, "<$dir/$file.status")
    {
        $status = <STATUS>;
        chomp $status;
        $mtime = (stat STATUS)[9] unless ($status eq "nil" || $status eq "pending");
        close STATUS;
    }
    if (!$mtime && $file !~ /^OLD\//)
    {
        $mtime = (stat "$dir/$file")[9];
    }
    return ($status, $mtime);
}

sub get_previous_state($)
{
    my $file = shift;
    my $prev_status = "nil";

    if (open PREVSTATUS, "<$dir/OLD/$file.status")
    {
        $prev_status = <PREVSTATUS>;
        chomp $prev_status;
        close PREVSTATUS;
    }
    return $prev_status;
}

sub get_patch_reviewer($)
{
    my $file = shift;

    return undef unless open REVIEW, "<$dir/$file.review";
    chomp( my $ret = <REVIEW> );
    close REVIEW;
    return $ret;
}

sub get_notify_headers($$)
{
    my $file = shift;
    my $status = shift;
    my @headers;

    return () unless open PATCH, "<$dir/$file";

    push @headers, "From: $email_from";

    while (<PATCH>)
    {
        if (/^Subject: (.*)$/)
        {
            my $subject = $1;
            $subject = "Re: " . $subject unless $subject =~ /^[Rr][Ee]: /;
            push @headers, "Subject: $subject";
        }
        elsif (/^From: (.*)$/)
        {
            push @headers, "To: $1";
        }
        elsif (/^Message-Id: (.*)$/)
        {
            push @headers, "In-Reply-To: $1";
            push @headers, "References: $1";
        }
        last if (/^$/);
    }
    close PATCH;

    push @headers, "X-Patch-Status: $status_descr{$status}";
    push @headers, "X-Patch-URL: $base_url/$file";
    push @headers, "Reply-To: wine-devel\@winehq.org";
    return @headers;
}

sub notify_state_change($$$)
{
    my $file = shift;
    my $prev_status = shift;
    my $status = shift;

    return if $prev_status eq $status;

    printf "file %s status changed %s -> %s\n", $file, $prev_status, $status unless $quiet;

    # if there's no available explanation, don't notify
    return unless defined $status_explanation{$status};

    if ($status eq "assigned")
    {
        my $reviewer = get_patch_reviewer( $file );
        push @{$reviews{$reviewer}}, $file if $reviewer;
    }

    my @headers = get_notify_headers( $file, $status );
    return unless @headers;

    return if $dry_run;

    open PREVSTATUS, ">$dir/OLD/$file.status" or return;
    printf PREVSTATUS "%s\n", $status;
    close PREVSTATUS;

    open SENDMAIL, "|/usr/sbin/sendmail -oi -t -odq" or return;
    print SENDMAIL join("\n", @headers), "\n\n";
    print SENDMAIL <<"EOF";
Thank you for your contribution to Wine!

This is an automated notification to let you know that your patch has
been reviewed and its status set to "$status_descr{$status}".

$status_explanation{$status}
EOF

    if ($status ne "committed" && $status ne "assigned")
    {
        print SENDMAIL <<"EOF";

If you do not understand the reason for this status, disagree with our
assessment, or are simply not sure how to proceed next, please ask for
clarification by replying to this email.
EOF
    }
    close SENDMAIL;
}

sub notify_reviewers()
{
    while ((my $rev, $patches) = each( %reviews ))
    {
        my $patch_urls = join "\n    ", map({ "$base_url/$_"; } sort @{$patches});
        my $patch_str = @{$patches} > 1 ? "patches" : "patch";

        printf "notifying %s about %s\n", $rev, join ", ", sort @{$patches} unless $quiet;
        next if $dry_run;

        open SENDMAIL, "|/usr/sbin/sendmail -oi -t -odq" or return;
        print SENDMAIL <<"EOF";
From: $email_from
To: $rev
Subject: Wine $patch_str assigned for review
X-Patch-URL: $patch_urls
Reply-To: wine-devel\@winehq.org

This is an automated notification to let you know that you have been
asked to review the following Wine $patch_str:

    $patch_urls

If you think that a patch is correct and can be committed, please send
a mail to wine-patches with your Signed-off-by header, as a reply to
the original patch email.

If you find some issues in a patch, please send a mail to the patch
author and CC wine-devel so that the patch status can be updated
accordingly.

If you feel that you don't have the time or the qualifications to
review a patch, please send a mail to wine-devel or directly to
julliard\@winehq.org so that the patch can be assigned to another
reviewer.

Thank you for your help!
EOF
        close SENDMAIL;
    }
}

# expire current patches

opendir DIR, $dir or die "cannot open '$dir': $!\n";
foreach my $file (sort readdir DIR)
{
    next unless $file =~ /^[0-9]+$/;
    my ($status, $mtime) = get_patch_state( $file );
    my $prev_status = get_previous_state( $file );
    my $limit = $status_expiry{$status} || 7;

    notify_state_change( $file, $prev_status, $status );

    if (($now - $mtime - 12*60*60) / (24*60*60) > $limit)
    {
        if ($status eq "nil" || $status eq "pending")
        {
            # move to OLD
            printf "rename $file -> OLD   %s  %s\n", $status, get_patch_subject( "$file" ) unless $quiet;
            unless ($dry_run)
            {
                rename "$dir/$file",        "$dir/OLD/$file";
                rename "$dir/$file.status", "$dir/OLD/$file.status";
                rename "$dir/$file.order",  "$dir/OLD/$file.order";
                rename "$dir/$file.review", "$dir/OLD/$file.review";
                rename "$dir/$file.signoff", "$dir/OLD/$file.signoff";
                rename "$dir/$file.testbot", "$dir/OLD/$file.testbot";
                rename "$dir/$file.testfail", "$dir/OLD/$file.testfail";
            }
        }
        else
        {
            printf "unlink $file   %s  %s\n", $status, get_patch_subject( "$file" ) unless $quiet;
            unless ($dry_run)
            {
                unlink "$dir/$file";
                unlink "$dir/$file.status";
                unlink "$dir/$file.order";
                unlink "$dir/$file.signoff";
                unlink "$dir/$file.review";
                unlink "$dir/$file.testbot";
                unlink "$dir/$file.testfail";
                unlink "$dir/OLD/$file.status";
            }
        }
    }
}
closedir DIR;

# expire old patches whose status has changed

opendir DIR, "$dir/OLD" or die "cannot open '$dir/OLD': $!\n";
foreach my $file (sort readdir DIR)
{
    next unless $file =~ /^[0-9]+$/;
    my ($status, $mtime) = get_patch_state( "OLD/$file" );

    if ($status eq "pending")
    {
        # remove status file
        printf "unlink OLD/$file.status\n" unless $quiet;
        unlink "$dir/OLD/$file.status" unless $dry_run;
    }
    elsif ($status ne "nil")
    {
        printf "unlink OLD/$file   %s  %s\n", $status, get_patch_subject( "OLD/$file" ) unless $quiet;
        unless ($dry_run)
        {
            unlink "$dir/OLD/$file";
            unlink "$dir/OLD/$file.status";
            unlink "$dir/OLD/$file.order";
            unlink "$dir/OLD/$file.review";
            unlink "$dir/OLD/$file.signoff";
            unlink "$dir/OLD/$file.testbot";
            unlink "$dir/OLD/$file.testfail";
        }
    }
}
closedir DIR;

notify_reviewers();
