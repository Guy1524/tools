#!/usr/bin/perl
#
# Copyright 2008 Alexandre Julliard <julliard@winehq.org>
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
# This program creates the global index of all the builds for which we have
# WineTest result data.

use strict;
use warnings;
use open ':utf8';
use CGI qw(:standard);
use POSIX qw(strftime);

sub BEGIN
{
    if ($0 !~ m=^/=)
    {
        # Turn $0 into an absolute path so it can safely be used in @INC
        require Cwd;
        $0 = Cwd::cwd() . "/$0";
    }
    unshift @INC, $1 if ($0 =~ m=^(/.*)/[^/]+$=);
}
use vars qw/$gitdir $gitweb $queuedir/;
require "winetest.conf";

binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';

$ENV{GIT_DIR} = $gitdir;

my %w95     = (name => "Win95");
my %w98     = (name => "Win98");
my %me      = (name => "Me");
my %nt3     = (name => "NT3");
my %nt4     = (name => "NT4");
my %w2k     = (name => "2000");
my %xp      = (name => "XP");
my %w2k3    = (name => "2003");
my %vista   = (name => "Vista");
my %w2k8    = (name => "2008");
my %win7    = (name => "Win7");
my %win8    = (name => "Win8");
my %win10   = (name => "Win10");
my %unknown = (name => "Other");
my %linux   = (name => "Linux");
my %mac     = (name => "Mac");
my %bsd     = (name => "BSD");
my %solaris = (name => "Solaris");
my %wine    = (name => "Wine");

# Define the order of version groups in the summary
my @groups = (\%w95, \%w98, \%me, \%nt3, \%nt4, \%w2k, \%xp, \%w2k3, \%vista, \%w2k8, \%win7, \%win8, \%win10,
              \%unknown, \%linux, \%mac, \%bsd, \%solaris, \%wine);

my @months = ("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");

# read the test data dir

my @builds;
my @too_old;

opendir(DIR, "./data/") or die "cannot open ./data";
foreach my $build (readdir(DIR))
{
    next if $build =~ /^\./;
    next unless $build =~ /^[-.0-9a-zA-Z]+$/;
    next unless -f "./data/$build/index.html";

    my ($commit, $date, $subject);
    $commit = `git log --max-count=1 --pretty="format:%ct %s" "$build^0" 2>/dev/null` if ($build =~ /^[0-9a-f]{40}$/);
    if ($commit && $commit =~ /^(\d+) (.*)$/)
    {
        $date = $1;
        $subject = $2;
        # make sure the file mtime matches the commit time
        utime $date, $date, "data/$build";
    }
    else
    {
        $date = (stat "./data/$build")[9];
        $subject = "";
    }
    # archive builds older than 2 months
    if (time() - $date > 60 * 24 * 60 * 60) { push @too_old, $build; }
    else { push @builds, { name => $build, date => $date, subj => $subject }; }
}

closedir(DIR);
@builds = sort { $b->{date} <=> $a->{date} } @builds;

# remove the too old results
foreach my $build (@too_old) { rename "data/$build", "old-data/$build"; }

# count how many test runs we have for each version

my %versions = ();

foreach my $build (@builds)
{
    my %build_ver = ();
    if (open TOTAL, "./data/$build->{name}/total.txt" )
    {
        while (<TOTAL>)
        {
            if (/^([A-Za-z0-9]+)\s+(\d+)\s+(\d+)\s+(\d+)\s+(\d+)(?:\s+(\d+))?/)
            {
                my ($name, $runs, $tests, $errors, $todos, $successes) = ($1, $2, $3, $4, $5, $6);
                $versions{$name}++;
                $build_ver{$name} = [ $runs, $tests, $errors, $todos, $successes ];
            }
        }
        close TOTAL;
    }
    $build->{versions} = \%build_ver;
}

# load summary files

my %alltests = ();

foreach my $build (@builds)
{
    open SUM, "./data/$build->{name}/summary.txt" or next;
    while (<SUM>)
    {
        chomp;
        my ($test, $group, $cell) = split / +/, $_, 3;
        $alltests{$test}->{$build->{name}}->{$group} = $cell;
    }
    close SUM;
}

# build the tests linked list

my $prev;
foreach my $test (sort keys %alltests)
{
    $alltests{$test}->{prev} = "$prev.html" if $prev;
    $alltests{$prev}->{next} = "$test.html" if $prev;
    $prev = $test;
}

# output the html files for individual test runs

foreach my $test (keys %alltests)
{
    open OUT, ">data/tests/$test.html.new" or die "cannot create data/tests/$test.html.new";
    print OUT <<EOF;
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
                      "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <title>$test test runs</title>
  <link rel="stylesheet" href="/summary.css" type="text/css">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>
<body>
<div class="navbar">
EOF
    print OUT defined($alltests{$test}->{prev}) ? "<a href=\"./$alltests{$test}->{prev}\">prev</a>" : "prev";
    print OUT defined($alltests{$test}->{next}) ? " | <a href=\"./$alltests{$test}->{next}\">next</a>" : " | next";
    print OUT <<EOF;
 | <a href="..">index</a>
<script type="text/javascript" src="/summary.js"></script>
</div>
<div class="main">
<h2>$test test runs</h2>
<table class="report">
<thead>
  <tr><th class="test">Build</th><th class="test">Date</th>
EOF

    # check which group names are actually used by that test
    my %used_group;
    foreach my $build (@builds)
    {
        next unless defined $alltests{$test}->{$build->{name}};
        foreach my $group (keys %{$alltests{$test}->{$build->{name}}}) { $used_group{$group} = 1; }
    }

    foreach my $group (@groups)
    {
        next unless defined $used_group{$group->{name}};
        printf OUT "  <th class=\"test\">$group->{name}</th>\n";
    }
    print OUT "  <th class=\"test\"></th></tr>\n";
    foreach my $build (@builds)
    {
        next unless defined $alltests{$test}->{$build->{name}};
        printf OUT "  <tr><td class=\"build\"><a href=\"../%s\" title=\"%s\">%s</a></td>\n",
                   $build->{name}, $build->{name}, substr($build->{name},0,12);
        printf OUT "  <td class=\"date\">%s</td>", strftime("%b&nbsp;%d", gmtime($build->{date}));
        foreach my $group (@groups)
        {
            next unless defined $used_group{$group->{name}};
            if (defined $alltests{$test}->{$build->{name}}->{$group->{name}})
            {
                printf OUT "    %s\n", $alltests{$test}->{$build->{name}}->{$group->{name}};
            }
            else
            {
                print OUT "    <td class=\"note\"></td>\n";
            }
        }
        print OUT "  <td class=\"links\"><a href=\"$gitweb?a=shortlog;h=$build->{name}\">shortlog</a>";
        print OUT "&nbsp;|&nbsp;<a href=\"../$build->{name}\">all&nbsp;tests</a></td></tr>\n";
    }
    print OUT "</table></body></html>\n";
    close OUT;
    rename "data/tests/$test.html.new", "data/tests/$test.html" or unlink "data/tests/$test.html.new";
}

open OUT, ">data/index.html.new" or die "cannot create data/index.html.new";

print OUT <<"EOF";
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
                      "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <title>Wine test runs</title>
  <link rel="stylesheet" href="/summary.css" type="text/css">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>
<body>
<div class="main">
<h2>Wine test runs</h2>
EOF

print OUT "<table class=\"report\"><thead><tr><th class=\"test\">Build</th><th class=\"test\">Date</th>\n";
foreach my $ver (@groups)
{
    next unless defined($versions{$ver->{name}});
    printf OUT "<th class=\"test\">%s</th>", $ver->{name};
}
print OUT "<th colspan=\"3\">Failures</th><th></th></tr></thead>\n";

foreach my $build (@builds)
{
    printf OUT "  <tr><td class=\"build\"><a href=\"%s\" title=\"%s\">%s</a></td>\n", $build->{name}, $build->{name}, substr($build->{name},0,12);
    printf OUT "  <td class=\"date\">%s</td>", strftime("%b&nbsp;%d", gmtime($build->{date}));
    my ($total_runs, $total_tests, $total_errors, $total_todos);
    foreach my $ver (@groups)
    {
        next unless defined($versions{$ver->{name}});
        my $counts = $build->{versions}->{$ver->{name}};
        if (!$counts || !@{$counts})
        {
            printf OUT "<td class=\"note\"> </td>";
        }
        else
        {
            my ($runs, $tests, $errors, $todos, $successes) = @{$counts};
            my $href = $runs > 1 ? "$build->{name}/index_$ver->{name}.html" : "$build->{name}";
            my $title = $runs > 1 ? "$runs test runs, " : "";
            $title .= "$tests unit tests, $errors have errors";
            $title .= ", $todos have todos" if ($todos);
            my $class = $errors ? ($successes ? "mixed" : "fail") . ($todos ? " also-todo" : "")
                                : ($todos ? "todo" : "pass");
            printf OUT "<td class=\"result %s\"><a title=\"%s\" href=\"%s\">%u</a></td>", $class, $title, $href, $errors || $todos;
            $total_runs++;
            $total_tests += $tests;
            $total_errors += $errors;
            $total_todos += $todos;
        }
    }
    if ($total_tests)
    {
        my $class = $total_errors ? "fail" : $total_todos ? "pass also-todo" : "pass";
        my $title = sprintf "%u test runs, %u total unit tests, %u have errors", $total_runs, $total_tests, $total_errors;
        $title .= ", $total_todos have todos" if $total_todos;
        printf OUT "\n  <td>&nbsp;</td><td class=\"result %s\"><a title=\"%s\" href=\"%s\">%4.1f%%</a></td><td>&nbsp;</td>\n",
                        $class, $title, $build->{name}, $total_errors * 100 / $total_tests;
    }
    else
    {
        print OUT "\n  <td>&nbsp;</td><td class=\"note\">&nbsp;</td><td>&nbsp;</td>\n";
    }
    print OUT "  <td class=\"commitlink\">";
    if ($build->{subj}) { printf OUT "<a href=\"$gitweb?a=shortlog;h=%s\">%s</a>", $build->{name}, escapeHTML($build->{subj}); }
    print OUT "</td></tr>\n";
}

print OUT <<"EOF";
</table></div>
<div class="navbar">
To run the tests on your Windows machine, download the <a href="/builds/winetest-latest.exe">latest winetest.exe</a> build.
If you have a 64-bit Windows OS, you can also run the <a href="/builds/winetest64-latest.exe">64-bit winetest</a>.<br>
If you don't see your results, check the <a href="/data/errors.html">rejected reports</a> list.
</div>
</body></html>
EOF

close OUT;

rename "data/index.html.new", "data/index.html" or unlink "data/index.html.new";

# generate a table of the errors encountered during processing

my @errors;

opendir DIR, $queuedir or die "cannot open $queuedir";
foreach my $dir (readdir DIR)
{
    next unless $dir =~ /^err.....$/;
    open ERR, "$queuedir/$dir/error" or next;
    my $msg = <ERR>;
    chomp $msg;
    my $date = (stat ERR)[9];
    close ERR;
    push @errors, { msg => $msg, date => $date, url => "../queue/$dir/report" };
}
closedir DIR;

open OUT, ">data/errors.html.new" or die "cannot create data/errors.html.new";

print OUT start_html( -title => "Errors caught during Wine test report processing",
                      -style => {src => "/summary.css"},
                      -encoding => "utf-8" );
print OUT "<div class=\"main\"><h2>Errors caught during Wine test report processing</h2>\n";
print OUT "<table class=\"report\"><thead><tr><th class=\"date\">Date</th><th class=\"commitlink\">Error</th></thread>\n";

foreach my $err (sort { $b->{date} <=> $a->{date}; } @errors)
{
    printf OUT "<tr><td class=\"date\">%s</td>\n", strftime("%b&nbsp;%d&nbsp;%H:%M:%S", gmtime($err->{date}));
    printf OUT "<td class=\"commitlink\"><a href=\"%s\">%s</a></td></tr>\n", $err->{url}, escapeHTML($err->{msg});
}
print OUT "</table>", end_html();
close OUT;

rename "data/errors.html.new", "data/errors.html" or unlink "data/errors.html.new";

exit 0;
