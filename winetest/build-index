#!/usr/bin/perl -w
#
# Build the global index for winetest result data
#
# Copyright 2008 Alexandre Julliard <julliard@winehq.org>
#

use strict;
use open ':utf8';
use CGI qw(:standard);

use vars qw/$gitdir $gitweb/;
require "winetest.conf";

binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';

$ENV{GIT_DIR} = $gitdir;

my %w95     = (name => "Win95");
my %w98     = (name => "Win98");
my %me      = (name => "Me");
my %nt3     = (name => "NT3");
my %nt4     = (name => "NT4");
my %w2k     = (name => "2000");
my %xp      = (name => "XP");
my %w2k3    = (name => "2003");
my %vista   = (name => "Vista");
my %unknown = (name => "Other");
my %wine    = (name => "Wine");

# Map dissect's IDs to the above hashes
my %idmap = (95=>\%w95, 98=>\%w98, me=>\%me, nt3=>\%nt3, nt4=>\%nt4, 2000=>\%w2k,
             xp=>\%xp, 2003=>\%w2k3, vista=>\%vista, unknown=>\%unknown, wine=>\%wine);

# Define the order of version groups in the summary
my @groups = (\%w95, \%w98, \%me, \%nt3, \%nt4, \%w2k, \%xp, \%w2k3, \%vista, \%unknown, \%wine);

my @months = ("Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec");

# read the test data dir

my @builds;
my @too_old;

opendir(DIR, "./data/") or die "cannot open ./data";
foreach my $build (readdir(DIR))
{
    next if $build =~ /^\./;
    next unless $build =~ /^[-.0-9a-zA-Z]+$/;
    next unless -f "./data/$build/index.html";

    my ($commit, $date, $subject);
    $commit = `git log --max-count=1 --pretty="format:%ct %s" "$build^0" 2>/dev/null` if ($build =~ /^[0-9a-f]{40}$/);
    if ($commit && $commit =~ /^(\d+) (.*)$/)
    {
        $date = $1;
        $subject = $2;
        # make sure the file mtime matches the commit time
        utime $date, $date, "data/$build";
    }
    else
    {
        $date = (stat "./data/$build")[9];
        $subject = "";
    }
    # archive builds older than 2 months
    if (time() - $date > 60 * 24 * 60 * 60) { push @too_old, $build; }
    else { push @builds, { name => $build, date => $date, subj => $subject }; }
}

closedir(DIR);
@builds = sort { $b->{date} <=> $a->{date} } @builds;

# remove the too old results
foreach my $build (@too_old) { rename "data/$build", "old-data/$build"; }

# count how many test runs we have for each version

my %versions = ();

foreach my $build (@builds)
{
    my %build_ver = ();
    if (opendir( DIR, "./data/$build->{name}" ))
    {
        foreach my $run (readdir(DIR))
        {
            next unless -d "./data/$build->{name}/$run";
            next unless $run =~ /^([0-9a-z]*)_.*/;
            next unless defined $idmap{$1};
            my $ver = $idmap{$1}->{name};
            $versions{$ver}++;
            $build_ver{$ver}++;
        }
        closedir(DIR);
    }
    $build->{versions} = \%build_ver;
}

open OUT, ">data/index.html.new" or die "cannot create data/index.html.new";

print OUT <<"EOF";
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
                      "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <title>Wine test runs</title>
  <link rel="stylesheet" href="/index.css" type="text/css">
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
</head>
<body>
EOF

print OUT "<table class=\"builds\"><tr><th class=\"build\">Build</th><th class=\"date\">Date</th>\n";
foreach my $ver (@groups)
{
    next unless defined($versions{$ver->{name}});
    printf OUT "<th class=\"version\">%s</th>", $ver->{name};
}
print OUT "<th class=\"commit\">Head commit</th></tr>\n";

my $odd = 0;
foreach my $build (@builds)
{
    printf OUT "<tr class=\"%s\">\n", $odd ? "dark" : "light";
    $odd = !$odd;
    printf OUT "  <td class=\"build\"><a href=\"%s\" title=\"%s\">%s</a></td>\n", $build->{name}, $build->{name}, substr($build->{name},0,12);
    my @date = gmtime($build->{date});
    printf OUT "  <td class=\"date\">%02d-%s-%04d %02d:%02d</td>", $date[3], $months[$date[4]], $date[5] + 1900, $date[2], $date[1], $date[0];
    foreach my $ver (@groups)
    {
        next unless defined($versions{$ver->{name}});
        my $count = $build->{versions}->{$ver->{name}};
        if (!$count)
        {
            printf OUT "<td class=\"version\">.</td>";
        }
        elsif ($count > 1)
        {
            printf OUT "<td class=\"version\"><a href=\"%s/#group_%s\">%u</a></td>", $build->{name}, $ver->{name}, $count;
        }
        else
        {
            printf OUT "<td class=\"version\"><a href=\"%s\">%u</a></td>", $build->{name}, $count;
        }
    }
    print OUT "\n  <td class=\"commit\">";
    if ($build->{subj}) { printf OUT "<a href=\"$gitweb?a=shortlog;h=%s\">%s</a>", $build->{name}, escapeHTML($build->{subj}); }
    print OUT "</td></tr>\n";
}
print OUT "</table>\n</body></html>\n";
close OUT;

rename "data/index.html.new", "data/index.html" or unlink "data/index.html.new";
exit 0;
