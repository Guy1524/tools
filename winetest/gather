#!/usr/bin/perl -w
#
# Searches for a $datadir/*/outdated, updates the corresponding
# index.html and removes the outdated.
#
# Files: winetest.conf
#
# Exit: 0 - successfully processed a build, call again
#       1 - should not happen
#       2 - there was nothing to do
#       3 - fatal error, something went utterly wrong
#
# Copyright (C) 2004 Ferenc Wagner
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

use strict;
use vars qw/$datadir/;
require "winetest.conf";

my $name0=$0;
$name0 =~ s+^.*/++;

# We support summary files version 4 and up
my $summary_version=4;


# Group result containers:
#  name        Group name
#  extrema     Hashes test names to an array containing the minimum and maximum
#                number of errors for the test across the group's reports
#  todo        Hashes test names to the maximum number of todos for that test
#  skipped     Hashes test names to the maximum number of skips for that test
#  digests     Hashes test names to a string which is 'differ' if the test
#                should be shown in the group's results table
#  reports     An array of report result containers
#
# Report result containers:
#  tag         The report's tag
#  dir         The directory containing the report data (log files, etc).
#  dllmissing  A hash of the missing dlls for that system
#  crash       The name of the last test that was run before winetest crashed
#  filelimit   The name of the last test that was run before the report file
#                size limit was reached
#  results     Hashes test names to an array containing that test's results:
#                [ count, todos, errors, skips ]
#              Where:
#               count    Is the number of checks in that test or a string
#                          describing the test failure
#               todos    Is the number of todo checks
#               errors   Is the number of checks that failed
#               skips    Is the number of times checks were skipped
my %w95   = (name => "Win95");
my %w98   = (name => "Win98");
my %me    = (name => "Me");
my %nt3   = (name => "NT 3");
my %nt4   = (name => "NT 4");
my %w2k   = (name => "2000");
my %xp    = (name => "XP");
my %w2k3  = (name => "2003");
my %vista = (name => "Vista");
my %wine  = (name => "Wine");

# Map dissect's IDs to the above hashes
my %idmap = (95=>\%w95, 98=>\%w98, me=>\%me, nt3=>\%nt3, nt4=>\%nt4,
             2000=>\%w2k, xp=>\%xp, 2003=>\%w2k3, vista=>\%vista, wine=>\%wine);

# Define the order of version groups in the summary
my @groups = (\%w95, \%w98, \%me, \%nt3, \%nt4, \%w2k, \%xp, \%w2k3, \%vista, \%wine);

my ($outdated,undef) = glob "$datadir/*/outdated";
exit 2 unless defined $outdated;
(my $build = $outdated) =~ s|^\Q$datadir\E/(.*)/outdated$|$1|;
(my $release = $build) =~ s/^(\d+).*$/$1/;

# Read in the data

my %alltests;                   # union of test names
my $url;                        # archive url of winetest.exe
foreach my $file (glob "$datadir/$build/*/summary.txt") {
    (my $dir = $file) =~ s|^\Q$datadir/$build\E/(.*?)/summary.txt$|$1|;
    (my $id, my @tag) = split /_/, $dir;
    my $group = $idmap{$id};
    if ($id eq "wine" && defined $tag[0]) {
        $tag[0] = $idmap{$tag[0]}->{name};
        $group = undef unless defined $tag[0]; # make the check below fail
    }
    if (!defined $group) {
        print STDERR "$name0:error: unknown architecture '$id' in '$file'\n";
        next;
    }

    my $report = {};
    # Read the dll information if present (newer type reports)
    my $dllinfo = "$datadir/$build/$dir/dllinfo.txt";
    if (open DLLINFO, "<$dllinfo") {
        while ($_ = <DLLINFO>) {
            if (/^\s*([0-9a-zA-Z_]+)=(dll is missing)\r?$/) {
                $report->{dllmissing}->{$1} = 1;
            }
        }
        close DLLINFO;
    }
    $report->{tag} = @tag?"@tag":"";
    $report->{dir} = $dir;
    if (!open TEST, "<$file") {
        print STDERR "$name0:error: unable to open '$file' for reading: $!\n";
        next;
    }
    if (($_ = <TEST>) ne "Version $summary_version\n") {
        print STDERR "$name0:error: wrong header in '$file': $_";
        close TEST;
        next;
    }
    if (($url = <TEST>) !~ s/^Archive: (.*)\n$/$1/) {
        print STDERR "$name0:error: wrong archive url in '$file': $url";
        close TEST;
        next;
    }
    while (<TEST>) {
        my ($digest, $dll, $unit, $count, $todo, $error, $skipped,
            $source, $rev) = split;
        my $testname = "$dll:$unit";
        # Leave this in for older type reports
        if ($unit =~ /_dll_missing/ or
            ($count eq "0" and exists $report->{dllmissing}->{$dll})) {
            # Mark the dll as missing on this system
            $report->{dllmissing}->{$dll} = 1;
            next;
        }
        $report->{results}->{$testname} = [$count, $todo, $error, $skipped];
	if ($rev =~ /\./) {
		$alltests{$testname} = "http://cvs.winehq.org/cvsweb/wine/$source" . ($rev ne "-"?"#rev$rev":"")
		    unless exists $alltests{$testname};
	}
	else {
		$alltests{$testname} = "http://source.winehq.org/git/wine.git/?a=blob;f=$source;" .
					($rev ne "-" ? "h=$rev;" : "hb=master;")
		    unless exists $alltests{$testname};
	}
        if ($count ne "failed") {
            if (defined $group->{extrema}->{$testname}) {
                my $extrema = $group->{extrema}->{$testname};
                $extrema->[0] = $error if $error < $extrema->[0];
                $extrema->[1] = $error if $error > $extrema->[1];
            } else {
                $group->{extrema}->{$testname} = [$error, $error];
            }

            if ($skipped > 0) {
                # Mark this test as being (partly) skipped for one or more reports in the group
                $group->{skipped}->{$testname} = 1;
            }

            if ($todo > 0) {
                if (defined $group->{todo}->{$testname}) {
                    $group->{todo}->{$testname} = $todo if $todo > $group->{todo}->{$testname};
                } else {
                    $group->{todo}->{$testname} = $todo;
                }
            }
        } elsif ($todo eq "crash") {
            $report->{crash} = $testname;
        } elsif ($todo eq "filelimit") {
            $report->{filelimit} = $testname;
        }
        my $prevdigest = \$group->{digests}->{$testname};
        $$prevdigest = ($count eq "failed" || $error || $skipped ||
                        ($$prevdigest && $$prevdigest ne $digest))?"differ":$digest;
    }
    close TEST;

    push @{$group->{reports}}, $report;
}

# Find missing tests. After this exercise all test results (correct, failed
# and missing) are available for all reports.
foreach my $group (@groups) {
    next unless exists $group->{reports};
    foreach my $report (@{$group->{reports}}) {
        foreach my $testname (sort keys %alltests) {
            if (!exists $report->{results}->{$testname}) {
                # Make sure missing tests are shown in the group results
                $group->{digests}->{$testname} = "differ";
                my ($dll, $unit) = split(/:/, $testname);
                my $crash = $report->{crash};
                my $filelimit = $report->{filelimit};
                if (exists $report->{dllmissing}->{$dll}) {
                    # Mark this test as missing because of a missing dll
                    $report->{results}->{$testname} = ["dll missing", "-", "-", "-"];
                } elsif (defined $crash && $testname gt $crash) {
                    # Mark this test as missing because of a winetest crash.
                    $report->{results}->{$testname} = ["winetest crash", "-", "-", "-"];
                } elsif (defined $filelimit && $testname gt $filelimit) {
                    # Mark this test as missing because of a partial report file.
                    $report->{results}->{$testname} = ["file limit", "-", "-", "-"];
                } else {
                    # Mark this test as missing for an unknown reason
                    $report->{results}->{$testname} = ["test missing", "-", "-", "-"];
                }
            }
        }
    }
}

# Write out the tables

my ($header);                   # same in thead and tfoot
foreach my $group (@groups) {
    if (exists $group->{reports}) {
        my $report_count = @{$group->{reports}};
        if ($report_count > 1) {
            $header .= "      <th><a href=\"#group_$group->{name}\">$group->{name}<br><small>$report_count reports</small></a></th>\n";
        } else {
            my $report = $group->{reports}->[0];
            # If dllinfo.txt exist we use a different layout (new style report)
            if (-r "$datadir/$build/$report->{dir}/dllinfo.txt") {
                $header .= <<"EOF";
    <th>$group->{name}<br><small>
        <a href=\"$report->{dir}/version.txt\">$report->{tag}</a><br>
        <a href=\"$report->{dir}/dllinfo.txt\">[info]</a>
        <a href=\"$report->{dir}/report\">[file]</a></small></th>
EOF
            } else {
                $header .= <<"EOF";
    <th>$group->{name}<br><small>
        <a href=\"$report->{dir}/build.txt\">$report->{tag}</a><br>
        <a href=\"$report->{dir}/version.txt\">[info]</a>
        <a href=\"$report->{dir}/report\">[file]</a></small></th>
EOF
            }
        }
    }
}
chop $header;

if (!open OUT, ">$datadir/$build/index.html") {
  print STDERR "$name0:error: unable to open '$datadir/$build/index.html' for writing: $!\n";
  goto DONE;
}
print OUT <<"EOF";
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
                      "http://www.w3.org/TR/html4/strict.dtd">
<html>
<head>
  <title>$build</title>
  <link rel="stylesheet" href="../../summary.css" type="text/css">

  <meta http-equiv="Content-Type"
        content="text/html; charset=ISO-8859-1">
  <meta name="Author" content="gather">
  <meta http-equiv="Content-Script-Type" content="text/javascript">
</head>

<body>
<table class="navbar">
  <tr>
    <td class="left">
      <a href="/site?testing=prev&amp;current=$build">Previous build</a>
    </td>
    <td><script type="text/javascript" src="../../summary.js"></script
        ><noscript><p>JavaScript support missing</p></noscript></td>
    <td class="right">
      <a href="/site?testing=next&amp;current=$build">Next build</a>
    </td>
  </tr>
</table>
<h3>Legend</h3>
<p class="legend">All tests <span class="result pass">pass</span> in all reports<br>
   Some tests <span class="result mixed">fail</span> in some reports<br>
   Some tests <span class="result fail">fail</span> in all reports<br>
   This <span class="result pass also-skip">border</span> signals that some tests are skipped<br>
   This <span class="result pass also-todo">border</span> and this <span class="result todo">background</span> signal that the implementation needs some work
</p>
<h1>Main summary for build <a href="$url">$build</a></h1>
<table class="report">
  <thead>
    <tr>
      <th class="test">dll:unit_test</th>
$header
    </tr>
  </thead>
  <tfoot>
    <tr>
      <th class="test">dll:unit_test</th>
$header
    </tr>
  </tfoot>
  <tbody onDblClick="clone();">
EOF

# Output a single cell of a test
sub singletest($$$) {
    my ($report, $testname, $groupname) = @_;
    my $file = "$report->{dir}/$testname.txt";
    my ($count, $todo, $error, $skipped) = @{$report->{results}->{$testname}};
    if ($count eq "failed") {
        my $msg = $todo eq "crash"?"crashed":
                  $todo eq "-2"?"failed":
                  $todo =~ /^-/?"crashed":
                  $todo eq "filelimit"?"file limit":
                  $todo eq "258"?"timeout":"failed";
        my $fail = -r "$datadir/$build/$file"?"<a href=\"$file\">$msg</a>":$msg;
        print OUT "      <td class=\"note\">$fail</td>\n";
    } elsif ($count eq "dll missing") {
        my ($dll, $unit) = split(/:/, $testname);
        $dll.=".dll" if ($dll !~ /\./);
        my $href=(-r "$datadir/$build/$file") ? "href=\"$file\"" : "";
        print OUT <<"EOF";
      <td class="result pass also-skip"><a
        title="No tests run as $dll is not present on this system"
        >n/a</a></td>
EOF
    } elsif ($count eq "winetest crash") {
        print OUT <<"EOF";
      <td class="note"><a
        title="Test did not run as winetest crashed"
        >winetest</a></td>
EOF
    } elsif ($count eq "file limit") {
        print OUT <<"EOF";
      <td class="note"><a
        title="Test is missing because of a partial report file"
        >truncated</a></td>
EOF
    } elsif ($count eq "test missing") {
        print OUT <<"EOF";
      <td class="note"><a
        title="Test did not run for an unknown reason"
        >not run</a></td>
EOF
    } else {
        my $class = $error?"fail":$todo?"todo":"pass";
        $class .= " also-skip" if ($skipped);
        $class .= " also-todo" if ($todo);
        my $msg=$todo ? ($error ? "$error+$todo" : $todo) : $error;
        print OUT <<"EOF";
      <td class="result $class"><a
        href="$file"
        title="$count tests, $error errors, $todo todos, $skipped skips"
        onMouseOver="refresh('$testname','$groupname $report->{tag}',$count,$todo,$error,$skipped);"
        >$msg</a></td>
EOF
    }
}

# Create the Main Summary
foreach my $testname (sort keys %alltests) {
    print OUT <<"EOF";
    <tr>
      <td class="test">
        <a href="$alltests{$testname}">$testname</a></td>
EOF
    foreach my $group (@groups) {
        if (!exists $group->{reports}) {
            # Do nothing
        } elsif (@{$group->{reports}} == 1) {
            singletest($group->{reports}->[0], $testname, $group->{name});
        } else {
            my $href = "href=\"#group_$group->{name}:$testname\"";
            if (exists $group->{extrema}->{$testname}) {
                my ($min,$max) = @{$group->{extrema}->{$testname}};
                my $todo=$group->{todo}->{$testname};
                my $class = $min?"fail":$max?"mixed":$todo?"todo":"pass";
                $class .= " also-todo" if ($todo);
                $class .= " also-skip" if (exists $group->{skipped}->{$testname});
                my $title = "";
                if ($min)
                {
                    $title = " title=\"Best: $min";
                    $title.= ", Todo: $group->{todo}->{$testname}" if (exists $group->{todo}->{$testname});
                    $title.="\"";
                }
                my $errors = $min==$max?$min:"$min to $max";
                my $msg=$todo ? ($max ? "$max+$todo" : $todo) : $max;
                print OUT <<"EOF";
      <td class="result $class"><a $href$title
        onMouseOver="refresh('$testname','$group->{name}','-','-','$errors');"
        >$msg</a></td>
EOF
            } else {
                print OUT "      <td class=\"note\"><a $href>.</a></td>\n";
            }
        }
    }
    print OUT "    </tr>\n";
}
print OUT <<"EOF";
  </tbody>
</table>
EOF

# Take the groups with multiple reports
foreach my $group (@groups) {
    next unless exists $group->{reports} && @{$group->{reports}} > 1;

    $header = "";
    foreach my $report (@{$group->{reports}}) {
        # If dllinfo.txt exist we use a different layout (new style report)
        if (-r "$datadir/$build/$report->{dir}/dllinfo.txt") {
            $header .= <<"EOF";
    <th><small><a href=\"$report->{dir}/version.txt\">$report->{tag}</a><br>
        <a href=\"$report->{dir}/dllinfo.txt\">[info]</a>
        <a href=\"$report->{dir}/report\">[file]</a></small></th>
EOF
        } else {
            $header .= <<"EOF";
    <th><small><a href=\"$report->{dir}/build.txt\">$report->{tag}</a><br>
        <a href=\"$report->{dir}/version.txt\">[info]</a>
        <a href=\"$report->{dir}/report\">[file]</a></small></th>
EOF
        }
    }
    chop $header;

    print OUT <<"EOF";
<hr>
<h2><a name="group_$group->{name}">$group->{name} differences</a></h2>
<table class="report">
  <thead>
    <tr>
      <th class="test">dll:unit_test</th>
$header
    </tr>
  </thead>
  <tfoot>
    <tr>
      <th class="test">dll:unit_test</th>
$header
    </tr>
  </tfoot>
  <tbody onDblClick="clone();">
EOF
    foreach my $testname (sort keys %alltests) { # skip identical
        my $digest = $group->{digests}->{$testname};
        next unless defined $digest && $digest eq "differ";
        print OUT <<"EOF";
    <tr>
      <td class="test">
        <a href="$alltests{$testname}" name="group_$group->{name}:$testname">$testname</a></td>
EOF
        foreach my $report (@{$group->{reports}}) {
            singletest($report, $testname, $group->{name});
        }
    print OUT <<"EOF";
    </tr>
EOF
    }
    print OUT <<"EOF";
  </tbody>
</table>
EOF
}
print OUT <<"EOF";
</body>
</html>
EOF
close OUT;

DONE:
if (!unlink $outdated) {
    print STDERR "$name0:error: unable to unlink '$outdated': $!\n";
    exit 3;
}
