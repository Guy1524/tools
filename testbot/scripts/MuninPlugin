#!/usr/bin/perl
# A Munin plugin that retrieves activity statistics from the TestBot web
# server.
#
# Copyright 2018 Francois Gouget
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301, USA

=head1 NAME

testbot_ - A plugin to monitor a Wine TestBot server.

=head1 APPLICABLE SYSTEMS

The plugin retrieves activity statistics using the a Wine TestBot's web
interface so no there are no local requirements.

=head1 CONFIGURATION

You need to specify the URL of the TestBot server to connect to and a secret
API key so only authorized Munin instances can collect statistics.

   [testbot_multi_*]
        env.apikey APIKey
        env.url https://server.domain/Munin.pl


=head1 LICENSE

LGPLv2

=cut

use strict;
use Munin::Plugin;

use File::Basename;
use LWP::UserAgent;
use Encode;

need_multigraph();


sub get_cache_filename()
{
    return $Munin::Plugin::statefile;
}

sub fetch_url($$)
{
    my ($url, $apikey) = @_;

    my $ua = LWP::UserAgent->new();
    my $r;
    local $SIG{ALRM} = sub { die "timeout" };
    foreach my $try (1, 2, 3, 4, 5)
    {
        eval
        {
            alarm(120);
            $r = $ua->get("$url?APIKey=$apikey");
            alarm(0);
        };
        last if (defined $r and !$r->is_error);
        print STDERR "try $try: could not fetch '$url': ", $r->status_line, "\n";
        sleep($try * 20);
    }
    exit(1) if (!$r);

    my $filename = get_cache_filename();
    if (open(my $fh, ">", $filename))
    {
        print $fh decode('utf-8', $r->content);
        close($fh);
    }
    return $filename;
}

sub print_section($$$)
{
    my ($CacheFile, $PluginName, $Section) = @_;
    if (open(my $fh, "<", $CacheFile))
    {
        my $Print;
        while (my $Line = <$fh>)
        {
            if ($Line eq "===== $Section =====\n")
            {
                $Print = 1;
            }
            elsif ($Line =~ /^===== /)
            {
                last if ($Print);
            }
            elsif ($Print)
            {
                # Prefix the graph identifiers with the plugin name to make
                # them globally unique.
                $Line =~ s/^multigraph /multigraph ${PluginName}_/;
                print $Line;
            }
        }
        close($fh);
    }
}


my $Section = $ARGV[0] || "data";

if ($Section ne "config" and $Section ne "data")
{
    print STDERR "unknown option '$Section'\n";
    exit 1;
}

if (!exists $ENV{"url"})
{
    print STDERR "you must define env.url in the configuration file\n";
    exit 1;
}
if (!exists $ENV{"apikey"})
{
    print STDERR "you must define env.apikey in the configuration file\n";
    exit 1;
}

my $CacheFile = fetch_url($ENV{"url"}, $ENV{"apikey"});
if ($CacheFile)
{
    my $PluginName = "testbot_". (split("_", basename("$0")))[-1];
    print_section($CacheFile, $PluginName, $Section);
    unlink $CacheFile if ($Section eq "data");
}
exit 0;
