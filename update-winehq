#!/usr/bin/perl -w
#
# Update the winehq.org homepage from the ANNOUNCE file of a new Wine release
#
# Copyright 2006 Alexandre Julliard
#
# Usage: update-winehq release [announce-file]
#
# Must be run from the top-level dir of a git checkout of the website module
#

use strict;
use open ':utf8';

sub xml_escape($)
{
    my $str = shift;
    $str =~ s/&/&amp;/g;
    $str =~ s/</&lt;/g;
    $str =~ s/>/&gt;/g;
    my @chars = unpack "U*", $str;
    $str = join "", map { ($_ > 127) ? sprintf "&#%u;", $_ : chr($_); } @chars;
    $str =~ s/(http:\/\/\S+)/<a href=\"$1\">$1<\/a>/g;
    return $str;
}

my $rel = $ARGV[0];
my @text;

die "Not in website dir?" unless -d "news/en";
system("git", "pull") == 0 or die "git pull failed";

# Parse the ANNOUNCE file

open ANNOUNCE, $ARGV[1] || "ANNOUNCE" or die "cannot open ANNOUNCE";
my $whats_new = 0;
my $release_notes = 0;
my $first = 1;

push @text, "<body>\n<p>";

while (<ANNOUNCE>)
{
    chomp;
    if (!$whats_new && !$release_notes)
    {
        if (/^What's new in this release/)
        {
            $whats_new = 1;
            push @text, " <a href=\"{\$root}/announce/$rel\">What's new</a> in this release:";
            next;
        }
        elsif (/See the release notes/)
        {
            $release_notes = 1;
            xml_escape($_);
            s/See the release notes/See the <a href=\"{\$root}\/announce\/$rel\">release notes<\/a>/;
            push @text, " " . $_;
            next;
        }
        if (/^\s*$/)
        {
            push @text, "</p>\n<p>";
            next;
        }
        last if (/^The source is available/);
        last if (/^--------------------/);
        push @text, " " . xml_escape($_);
    }
    else
    {
        if (/^ *- (.*)$/)
        {
            push @text, ($first ? "\n<ul>\n  <li>" : "</li>\n  <li>") . xml_escape($1);
            $first = 0;
            next;
        }
        if (/^\s*$/)
        {
            if ($release_notes) {
                push @text, "</p>\n";
            } else {
                push @text, "</li>\n</ul>\n";
            }
            $whats_new = 0;
            $release_notes = 0;
            next;
        }
        push @text, " " . xml_escape($_);
    }
}

push @text, "<p>The source is <a href=\"http://prdownloads.sourceforge.net/wine/wine-$rel.tar.bz2\">available now</a>.\n";
push @text, "Binary packages are in the process of being built, and will appear soon at their respective <a href=\"{\$root}/download\">download locations</a>.\n";
push @text, "</p></body></news>\n";
close ANNOUNCE;

# Create the news file

my $newsdate = `date +%Y%m%d`;
chomp $newsdate;
my $newscount = 1;
my $newsfile;

do
{
    $newsfile = sprintf "news/en/%s%02u.xml", $newsdate, $newscount++;
}
while (-f "$newsfile");

open NEWS, ">$newsfile" or die "cannot create $newsfile";

my $date = `date "+%B %e, %Y"`;
chomp $date;

print NEWS <<EOF;
<news>
<date>$date</date>
<title>Wine $rel Released</title>
EOF

print NEWS join "", @text;
close NEWS;
print "Created $newsfile\n";

# Commit changes

if (system("git", "add", $newsfile))
{
    unlink $newsfile;
    die "git add $newsfile failed";
}

if (system("git", "commit", "-m", "Wine release $rel", $newsfile))
{
    system("git", "rm", "-f", $newsfile);
    die "git commit failed";
}

system("git", "push") == 0 or die "git push failed";
